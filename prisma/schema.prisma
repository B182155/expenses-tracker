// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Group {
  id          String    @id @default(auto()) @map("_id") @db.ObjectId
  title       String    @unique
  description String?   @db.String
  type        String?   @db.String
  createdBy   String    @map("creator_id") @db.ObjectId
  creator     User      @relation(name: "creater", fields: [createdBy], references: [id])
  memberIds   String[]  @db.ObjectId
  members     User[]    @relation(fields: [memberIds], references: [id])
  expenses    Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime? @updatedAt
}

model Expense {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  description String
  amount      Float
  date        DateTime? @default(now()) 
  // category    String   @db.String
  payerId     String   @db.ObjectId
  PaidBy      User     @relation(fields: [payerId], references: [id])
  group       Group    @relation(fields: [groupId], references: [id])
  groupId     String   @db.ObjectId
  splits      Split[] 
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Split {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  expense    Expense  @relation(fields: [expenseId], references: [id] ,onDelete: Cascade )  
  expenseId  String   @db.ObjectId
  friend     User     @relation(fields: [friendId], references: [id])
  friendId   String   @db.ObjectId
  amountOwed Float
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime? @map("email_verified")
  image         String?
  createdGroups Group[]   @relation(name: "creater")
  GroupIds      String[]  @db.ObjectId
  groups        Group[]   @relation(fields: [GroupIds], references: [id])
  accounts      Account[]
  sessions      Session[]
  SplittedBils  Split[]
  ExpensesPaid  Expense[]

  @@map("users")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verificationtokens")
}
